{"version":3,"sources":["hooks/http.hook.js","context/AuthContext.js","components/Loader.js","components/LinksList.js","pages/LinksPage.js","components/LinkCard.js","pages/DetailPage.js","pages/CreatePage.js","pages/AuthPage.js","hooks/message.hook.js","components/Navbar.js","App.js","hooks/auth.hook.js","routes.js","serviceWorker.js","index.js"],"names":["useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","message","clearError","noop","AuthContext","createContext","token","userId","login","logout","isAuthenticated","Loader","style","display","justifyContent","paddingTop","className","LinksList","links","length","map","link","index","key","_id","from","to","LinksPage","useContext","setLinks","fetchLinks","Authorization","fetched","useEffect","LinkCard","href","target","rel","clicks","Date","date","toLocaleDateString","DetailPage","setLink","linkId","useParams","id","getLink","CreatePage","history","useHistory","auth","pressHandler","event","push","window","M","updateTextFields","padding","placeholder","type","value","onChange","e","onKeyPress","htmlFor","AuthPage","text","toast","html","email","password","form","setForm","changeHandler","name","registerHandler","console","log","loginHandler","disabled","marginRight","onClick","Navbar","preventDefault","App","setToken","ready","setReady","setUserId","jwtToken","localStorage","setItem","removeItem","parse","getItem","useAuth","routes","path","exact","useRoutes","Provider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a48b42f8.chunk.js","sourcesContent":["import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const request = useCallback(\n    async (url, method = \"GET\", body = null, headers = {}) => {\n      setLoading(true);\n      try {\n        if (body) {\n          body = JSON.stringify(body)\n          headers['Content-Type'] = \"application/json\"\n        }\n        const response = await fetch(url, { method, body, headers });\n        const data = await response.json();\n        \n        if (!response.ok) {\n          throw new Error(data.message || \"Что-то пошло не так \");\n        }\n        setLoading(false);\n        return data;\n      } catch (error) {\n        setLoading(false);\n        setError(error.message);\n        throw error;\n      }\n    },\n    []\n  );\n\n  const clearError = useCallback( () => setError(null), []) ;\n\n  return { loading, request, error, clearError };\n};\n","import { createContext } from \"react\";\n\nfunction noop() {}\n\nexport const AuthContext = createContext({\n  token: null,\n  userId: null,\n  login: noop,\n  logout: noop,\n  isAuthenticated: false,\n});\n","import React from \"react\";\n\nexport const Loader = () => (\n<div style={{display: 'flex', justifyContent: 'center', paddingTop: '2rem'}}>\n  <div className=\"preloader-wrapper active\">\n    <div className=\"spinner-layer spinner-red-only\">\n      <div className=\"circle-clipper left\">\n        <div className=\"circle\" />\n      </div>\n      <div className=\"gap-patch\">\n        <div className=\"circle\" />\n      </div>\n      <div className=\"circle-clipper right\">\n        <div className=\"circle\" />\n      </div>\n    </div>\n  </div>\n  </div>\n\n);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const LinksList = ({ links }) => {\n  if (!links.length) {\n    return <p className=\"center\">Ссылок пока нет</p>;\n  }\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>№</th>\n          <th>Оригинальная</th>\n          <th>Сокращенная</th>\n          <th>Открыть</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {links.map((link, index) => {\n          return (\n            <tr key={link._id}>\n              <td>{index + 1}</td>\n              <td>{link.from}</td>\n              <td>{link.to}</td>\n              <td>\n                <Link to={`/detail/${link._id}`}>Открыть</Link>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React, { useState, useContext, useCallback, useEffect } from \"react\";\nimport { useHttp } from \"../hooks/http.hook\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { Loader } from \"../components/Loader\";\nimport { LinksList } from \"../components/LinksList\";\n\nexport const LinksPage = () => {\n  const { token } = useContext(AuthContext);\n  const { request, loading } = useHttp();\n  const [links, setLinks] = useState([]);\n\n  const fetchLinks = useCallback(async () => {\n    try {\n      const fetched = await request(`/api/link`, \"GET\", null, {\n        Authorization: `Bearer ${token}`,\n      });\n      setLinks(fetched);\n    } catch (error) {}\n  }, [token, request]);\n\n  useEffect(() => {\n    fetchLinks();\n  }, [fetchLinks]);\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return <>{!loading && <LinksList links={links} />}</>;\n};\n","import React from \"react\";\n\nexport const LinkCard = ({ link }) => {\n  return (\n    <>\n      <h2>Ссылка</h2>\n\n      <p>\n        Ваша ссылка:{\" \"}\n        <a href={link.to} target=\"_blank\" rel=\"noopener noreferrer\">\n          {link.to}\n        </a>\n      </p>\n      <p>\n        Откуда:{\" \"}\n        <a href={link.from} target=\"_blank\" rel=\"noopener noreferrer\">\n          {link.from}\n        </a>\n      </p>\n      <p>\n        Количество кликов по ссылке: <strong>{link.clicks}</strong>\n      </p>\n      <p>\n        Дата создания: <strong>{new Date(link.date).toLocaleDateString() }</strong>\n      </p>\n    </>\n  );\n};\n","import React, { useState, useContext, useCallback, useEffect } from \"react\";\nimport { useHttp } from \"../hooks/http.hook\";\nimport { useParams } from \"react-router-dom\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { Loader } from \"../components/Loader\";\nimport { LinkCard } from \"../components/LinkCard\";\n\nexport const DetailPage = () => {\n  const { token } = useContext(AuthContext);\n  const { request, loading } = useHttp();\n  const [link, setLink] = useState(null);\n  const linkId = useParams().id; //  from Route /:id\n\n  const getLink = useCallback(async () => {\n    try {\n      const fetched = await request(`/api/link/${linkId}`, \"GET\", null, {\n        Authorization: `Bearer ${token}`,\n      });\n      setLink(fetched);\n    } catch (error) {}\n  }, [token, linkId, request]);\n\n  useEffect(() => {\n    getLink();\n  }, [getLink]);\n\n  if (loading) {\n    return <Loader />;\n  }\n  return <>{!loading && link && <LinkCard link={link} />}</>;\n};\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { useHttp } from \"../hooks/http.hook\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const CreatePage = () => {\n  const history = useHistory();\n  const [link, setLink] = useState(\"\");\n  const auth = useContext(AuthContext);\n  const { request } = useHttp();\n\n  const pressHandler = async (event) => {\n    if (event.key === \"Enter\") {\n      try {\n        const data = await request(\n          \"/api/link/generate\",\n          \"POST\",\n          {\n            from: link,\n          },\n          { Authorization: `Bearer ${auth.token}` }\n        );\n        //console.log(data);\n        history.push(`/detail/${data.link._id}`);\n      } catch (e) {}\n    }\n  };\n\n  useEffect(() => {\n    window.M.updateTextFields();\n  }, []);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col s8 offset-s2\" style={{ padding: \"2rem\" }}>\n        <div className=\"input-field\">\n          <input\n            placeholder=\"Вставьте ссылку\"\n            id=\"link\"\n            type=\"text\"\n            value={link}\n            onChange={(e) => setLink(e.target.value)}\n            onKeyPress={pressHandler}\n          />\n          <label htmlFor=\"link\">Введите ссылку</label>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { useHttp } from \"../hooks/http.hook\";\nimport { useMessage } from \"../hooks/message.hook\";\nimport { AuthContext } from \"../context/AuthContext\";\n\nexport const AuthPage = () => {\n  const auth = useContext(AuthContext);\n  const message = useMessage();\n  const { loading, request, error, clearError } = useHttp();\n  const [form, setForm] = useState({ email: \"\", password: \"\" });\n\n  useEffect(() => {\n    message(error);\n    clearError();\n  }, [error, message, clearError]);\n\n  useEffect(() => {\n    window.M.updateTextFields();\n  }, []);\n\n  const changeHandler = (event) => {\n    setForm({ ...form, [event.target.name]: event.target.value });\n  };\n\n  const registerHandler = async () => {\n    try {\n      const data = await request(\"/api/auth/register\", \"POST\", { ...form });\n      console.log(\"data\", data);\n    } catch (error) {} // обработано в useHttp\n  };\n\n  const loginHandler = async () => {\n    try {\n      const data = await request(\"/api/auth/login\", \"POST\", { ...form });\n      auth.login(data.token, data.userId);\n    } catch (error) {} // обработано в useHttp\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col s6 offset-s3\">\n        <h1>Сократи ссылку</h1>\n\n        <div className=\"card indigo lighten-1\">\n          <div className=\"card-content white-text\">\n            <span className=\"card-title\">Авторизация</span>\n            <div>\n              <div className=\"input-field\">\n                <input\n                  placeholder=\"Введите email\"\n                  id=\"email\"\n                  type=\"text\"\n                  name=\"email\"\n                  className=\"yellow-input\"\n                  value={form.email}\n                  onChange={changeHandler}\n                  disabled={loading}\n                />\n                <label htmlFor=\"email\">Email</label>\n              </div>\n\n              <div className=\"input-field\">\n                <input\n                  placeholder=\"Введите пароль\"\n                  id=\"password\"\n                  type=\"password\"\n                  name=\"password\"\n                  className=\"yellow-input\"\n                  value={form.password}\n                  onChange={changeHandler}\n                  disabled={loading}\n                />\n                <label htmlFor=\"password\">Пароль</label>\n              </div>\n            </div>\n          </div>\n          <div className=\"card-action\">\n            <button\n              className=\"btn orange darken-1\"\n              style={{ marginRight: 10 }}\n              onClick={loginHandler}\n            >\n              Войти\n            </button>\n            <button\n              className=\"btn amber lighten-4 black-text\"\n              onClick={registerHandler}\n              disabled={loading}\n            >\n              Регистрация\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useCallback } from 'react'\n\nexport const useMessage = () => {\n    return useCallback((text) => {\n        if (window.M && text) {\n            window.M.toast({html: text})\n        }\n    }, [])\n\n}","import React, {useContext} from \"react\";\nimport { NavLink, useHistory } from \"react-router-dom\";\nimport { AuthContext } from \"../context/AuthContext\";\n\n\nexport const Navbar = () => {\n  const history = useHistory();\n  const auth = useContext(AuthContext);\n\n  const logoutHandler = (event) => {\n    event.preventDefault();\n    auth.logout();\n    history.push(\"/\");\n  };\n\n  return (\n    <nav>\n      <div className=\"nav-wrapper blue darken-1\" style={{padding: '0 2rem'}}>\n        <span className=\"brand-logo\">\n          Сокращение ссылок\n        </span>\n        <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n          <li>\n            <NavLink to=\"/create\">Создать</NavLink>\n          </li>\n          <li>\n            <NavLink to=\"/links\">Ссылки</NavLink>\n          </li>\n          <li>\n            <a href=\"/\" onClick={logoutHandler}>\n              Выйти\n            </a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { useRoutes } from \"./routes\";\nimport { useAuth } from \"./hooks/auth.hook\";\nimport { AuthContext } from \"./context/AuthContext\";\nimport { Navbar } from \"./components/Navbar\";\nimport { Loader } from \"./components/Loader\";\nimport \"materialize-css\";\n\nfunction App() {\n  const { token, login, logout, userId, ready } = useAuth();\n  const isAuthenticated = !!token; // по наличию токена и перевод в булево значение\n  const routes = useRoutes(isAuthenticated);\n\n  if (!ready) {\n    return <Loader />;\n  }\n  return (\n    <AuthContext.Provider\n      value={{ token, login, logout, userId, isAuthenticated }}\n    >\n      <Router>\n        {isAuthenticated && <Navbar />}\n        <div className=\"container\">{routes}</div>\n      </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","import { useCallback, useState, useEffect } from \"react\";\nconst storageName = \"userData\";\n\nexport const useAuth = () => {\n  const [token, setToken] = useState(null);\n  const [ready, setReady] = useState(false)\n  const [userId, setUserId] = useState(null);\n\n  const login = useCallback((jwtToken, id) => {\n    setToken(jwtToken);\n    setUserId(id);\n\n    localStorage.setItem(storageName, JSON.stringify({ userId: id, token: jwtToken }));\n  }, []);\n\n  const logout = useCallback(() => {\n    setToken(null);\n    setUserId(null);\n    localStorage.removeItem(storageName);\n  }, []);\n\nuseEffect(() => {\n    const data = JSON.parse(localStorage.getItem(storageName))\n\n    if (data&& data.token) {\n        login(data.token, data.userId)\n    }\n    setReady(true)\n\n}, [login])\n\n  return { login, logout, token, userId, ready };\n};\n","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { LinksPage } from \"./pages/LinksPage\";\nimport { DetailPage } from \"./pages/DetailPage\";\nimport { CreatePage} from \"./pages/CreatePage\";\nimport { AuthPage } from \"./pages/AuthPage\";\n\nexport const useRoutes = (isAuthenticated) => {\n  if (isAuthenticated) {\n    return (\n      <Switch>\n        <Route path=\"/links\" exact>\n          <LinksPage />\n        </Route>\n        <Route path=\"/create\" exact>\n          <CreatePage />\n        </Route>\n        <Route path=\"/detail/:id\">\n          <DetailPage />\n        </Route>\n        <Redirect to=\"/create\" />\n      </Switch>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\">\n        <AuthPage />\n      </Route>\n      <Redirect to=\"/\" />\n    </Switch>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}